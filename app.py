import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from professions import PROFESSIONS
from questions import QUESTIONS
from test_logic import calculate_results, get_top_recommendations
from explanation_engine import generate_profession_explanation, get_personality_insights

def main():
    st.set_page_config(
        page_title="IT –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è - –¢–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        page_icon="üíª",
        layout="wide"
    )
    
    st.title("üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'current_question' not in st.session_state:
        st.session_state.current_question = 0
    if 'answers' not in st.session_state:
        st.session_state.answers = {}
    if 'test_completed' not in st.session_state:
        st.session_state.test_completed = False
    if 'show_results' not in st.session_state:
        st.session_state.show_results = False
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if st.session_state.current_question == 0 and not st.session_state.test_completed:
        show_welcome_page()
    
    # –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    elif st.session_state.current_question > 0 and not st.session_state.test_completed:
        show_question_page()
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    elif st.session_state.show_results:
        show_results_page()

def show_welcome_page():
    st.markdown("### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏!")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π.**
        
        üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
        - –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ 25 –≤–æ–ø—Ä–æ—Å–æ–≤
        - –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç
        - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ø-3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        - –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        
        ‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** 5-10 –º–∏–Ω—É—Ç
        
        üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:** 25 –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö IT-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
        """)
    
    with col2:
        st.info(f"""
        **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
        
        üìä –í–æ–ø—Ä–æ—Å–æ–≤: 25
        
        üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–π: {len(PROFESSIONS)}
        
        üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: –¢–æ–ø-3
        """)
    
    st.markdown("---")
    
    if st.button("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", type="primary", use_container_width=True):
        st.session_state.current_question = 1
        st.rerun()

def show_question_page():
    question_num = st.session_state.current_question
    question_data = QUESTIONS[question_num - 1]
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress = question_num / len(QUESTIONS)
    st.progress(progress)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(f"**–í–æ–ø—Ä–æ—Å {question_num} –∏–∑ {len(QUESTIONS)}**")
    
    st.markdown("---")
    
    # –í–æ–ø—Ä–æ—Å
    st.markdown(f"### {question_data['question']}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    answer_key = f"question_{question_num}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    current_answer = st.session_state.answers.get(answer_key, None)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    selected_answer = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç:",
        options=list(range(len(question_data['answers']))),
        format_func=lambda x: question_data['answers'][x]['text'],
        index=current_answer if current_answer is not None else 0,
        key=f"radio_{question_num}"
    )
    
    st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if question_num > 1:
            if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", use_container_width=True):
                st.session_state.answers[answer_key] = selected_answer
                st.session_state.current_question -= 1
                st.rerun()
    
    with col2:
        st.markdown(f"<div style='text-align: center; padding: 8px;'>{question_num}/{len(QUESTIONS)}</div>", unsafe_allow_html=True)
    
    with col3:
        if question_num < len(QUESTIONS):
            if st.button("–î–∞–ª–µ–µ ‚û°Ô∏è", type="primary", use_container_width=True):
                st.session_state.answers[answer_key] = selected_answer
                st.session_state.current_question += 1
                st.rerun()
        else:
            if st.button("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", type="primary", use_container_width=True):
                st.session_state.answers[answer_key] = selected_answer
                st.session_state.test_completed = True
                st.session_state.show_results = True
                st.rerun()

def show_results_page():
    st.markdown("# üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")
    st.markdown("---")
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = calculate_results(st.session_state.answers)
    top_recommendations = get_top_recommendations(results, top_n=3)
    max_score = max(results.values()) if results else 1
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    personality_insights = get_personality_insights(st.session_state.answers)
    
    if personality_insights:
        st.markdown("### üí° –í–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:")
        for insight in personality_insights:
            st.info(f"‚ú® {insight}")
        st.markdown("---")
    
    # –î–∏–∞–≥—Ä–∞–º–º–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown("### üìä –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    max_possible_score = 24 * 5  # 24 –≤–æ–ø—Ä–æ—Å–∞ * 5 –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    all_results = []
    for profession, score in results.items():
        percentage = (score / max_possible_score) * 100 if max_possible_score > 0 else 0
        all_results.append({
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è': profession,
            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (%)': percentage,
            '–ë–∞–ª–ª—ã': score,
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': PROFESSIONS[profession]['category']
        })
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    all_results.sort(key=lambda x: x['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (%)'], reverse=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    df_chart = pd.DataFrame(all_results)
    
    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    fig = px.bar(df_chart, 
                 y='–ü—Ä–æ—Ñ–µ—Å—Å–∏—è', 
                 x='–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (%)',
                 color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                 title='–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Å–µ–º IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º (%)',
                 orientation='h',
                 height=max(600, len(df_chart) * 25))  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
    
    fig.update_layout(
        yaxis={'categoryorder': 'total ascending'},
        xaxis={'range': [0, 100], 'title': '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (%)'},
        showlegend=True,
        font=dict(size=11),
        margin=dict(l=200, r=50, t=50, b=50)  # –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ —Å–ª–µ–≤–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Ü–µ–ª—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    fig.update_traces(
        texttemplate='%{x:.0f}%',
        textposition='outside'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("---")
    
    st.markdown("### üèÜ –¢–æ–ø-3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:")
    st.markdown("")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ–ø-3
    for i, (profession, score, percentage) in enumerate(top_recommendations, 1):
        with st.expander(f"{i}. {profession} - {percentage:.1f}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", expanded=(i==1)):
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            st.progress(percentage / 100)
            st.markdown(f"**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {percentage:.1f}%**")
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            profession_info = PROFESSIONS[profession]
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            explanation = generate_profession_explanation(profession, st.session_state.answers, score, max_possible_score)
            if explanation:
                st.markdown("**–ü–æ—á–µ–º—É —ç—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:**")
                st.success(explanation)
            
            col1, col2 = st.columns([3, 2])
            
            with col1:
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {profession_info['description']}")
                st.markdown(f"**–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:** {', '.join(profession_info['skills'][:7])}")
                if len(profession_info['skills']) > 7:
                    st.markdown(f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:** {', '.join(profession_info['skills'][7:])}")
            
            with col2:
                info_text = f"""
                **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {profession_info['category']}
                
                **–£—Ä–æ–≤–µ–Ω—å –≤—Ö–æ–¥–∞:** {profession_info['entry_level']}
                """
                
                if 'salary_range' in profession_info:
                    info_text += f"\n\n**–ó–∞—Ä–ø–ª–∞—Ç–∞:** {profession_info['salary_range']}"
                
                if 'job_market' in profession_info:
                    info_text += f"\n\n**–†—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞:** {profession_info['job_market']}"
                
                st.info(info_text)
                
                # –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç
                if 'career_path' in profession_info:
                    st.markdown("**üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç:**")
                    for level in profession_info['career_path']:
                        st.markdown(f"‚Ä¢ {level}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("### üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é:")
        for i, (profession, _, _) in enumerate(top_recommendations, 1):
            profession_info = PROFESSIONS[profession]
            st.markdown(f"**{i}. {profession}:**")
            for tip in profession_info['learning_tips']:
                st.markdown(f"‚Ä¢ {tip}")
            st.markdown("")
    
    with col2:
        st.markdown("#### üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
        seen_resources = set()
        for profession, _, _ in top_recommendations:
            profession_info = PROFESSIONS[profession]
            for resource in profession_info['resources']:
                if resource not in seen_resources:
                    st.markdown(f"‚Ä¢ {resource}")
                    seen_resources.add(resource)
    
    st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", use_container_width=True):
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            st.session_state.current_question = 0
            st.session_state.answers = {}
            st.session_state.test_completed = False
            st.session_state.show_results = False
            st.rerun()
    
    with col2:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
            show_detailed_results(results)
    
    with col3:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            data=generate_results_text(top_recommendations),
            file_name="it_career_test_results.txt",
            mime="text/plain",
            use_container_width=True
        )

def show_detailed_results(results):
    st.markdown("### üìà –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_results = sorted(results.items(), key=lambda x: x[1], reverse=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    import pandas as pd
    
    df_data = []
    max_possible_score = 24 * 5  # 24 –≤–æ–ø—Ä–æ—Å–∞ * 5 –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    
    for profession, score in sorted_results:
        percentage = (score / max_possible_score) * 100
        category = PROFESSIONS[profession]['category']
        df_data.append({
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è': profession,
            '–ë–∞–ª–ª—ã': score,
            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (%)': f'{percentage:.1f}%',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category
        })
    
    df = pd.DataFrame(df_data)
    st.dataframe(df, use_container_width=True)

def generate_results_text(recommendations):
    text = "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ù–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï IT-–ü–†–û–§–ï–°–°–ò–ò\n"
    text += "=" * 50 + "\n\n"
    
    text += "–¢–û–ü-3 –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–´–• –ü–†–û–§–ï–°–°–ò–ò:\n\n"
    
    for i, (profession, score, percentage) in enumerate(recommendations, 1):
        text += f"{i}. {profession}\n"
        text += f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {percentage:.1f}%\n"
        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {PROFESSIONS[profession]['description']}\n"
        text += f"   –ù–∞–≤—ã–∫–∏: {', '.join(PROFESSIONS[profession]['skills'])}\n\n"
    
    return text

if __name__ == "__main__":
    main()
